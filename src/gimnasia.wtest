import gimnasia.*
import personas.*
import clubes.*

describe "rutinas" {

//Punto 1: rutinas
    const correrEnLaPlaya = new Running(intensidad = 1.2)
// Una actividad de running con intensisdad 1.2
    const remarEnElDelta = new Remo()
// Una actividad de remo
    const remarEnCaminoRemeros = new RemoCompetitivo() 
// Una actividad de remo comptetitivo
    const maratonBA = new Maraton(intensidad = 1.5)
//Una maraton con intensidad 1.5

//Punto 2: personas
        const calamardo = new Sedentario (peso = 60, tiempo = 5)
    //Una persona Sedentaria con peso 60 y tiempo de ejercicio 5
 	
        const bob = new Atleta(peso = 40) 
    // Una persona atleta con peso 40 

    
//Punto 3: clubes


	const recreo = new Predio(delClub = clubBarrial, rutinasPracticables = #{correrEnLaPlaya, maratonBA}) 
        //un predio con correrEnLaPlaya y maratonBA

	const nautico = new Predio(delClub = clubBarrial, rutinasPracticables = #{remarEnElDelta, remarEnCaminoRemeros})
        //un predio con remarEnElDelta y remarEnCaminoRemeros

	const clubBarrial = new Club(predios = 1) //un club con recreo y nautico
        //const prediosDeClubBarrial = [recreo, nautico]

 /*       clubBarrial.agregarPredio(recreo)
        clubBarrial.agregarPredio(nautico)*/

//	
//
// PUNTO 1
//	test "1.1 consulta running" {
//		//correrEnLaPlaya deberia gastar 360 calorias al practicarse por 5 minutos
//		//correrEnLaPlaya deberia gastar 10200 calorias al practicarse por 90 minutos
//	}
    test "running en la playa" {
        assert.equals(360, correrEnLaPlaya.caloriasGastadas(5))
        assert.equals(10200, correrEnLaPlaya.caloriasGastadas(90))
    }



//	test "1.2 consulta maraton" {
//		//maratonBA deberia gastar 900 calorias al practicarse por 5 minutos
//		//maratonBA deberia gastar 25500 calorias al practicarse por 90 minutos
//	}

    test "1.2 consulta maraton" {
      //  const maratonBA = new Maraton(intensidad = 1.5)
        assert.equals(900, maratonBA.caloriasGastadas(5))
        assert.equals(25500, maratonBA.caloriasGastadas(90))
    }

//	test "1.3 consulta remo" {
//		//remarEnElDelta deberia gastar 520 calorias al practicarse por 5 minutos
//		//remarEnElDelta deberia gastar 9360 calorias al practicarse por 90 minutos
//	}

    test "1.3 consulta remo"{
    
        assert.equals(520, remarEnElDelta.caloriasGastadas(5))
        assert.equals(9360, remarEnElDelta.caloriasGastadas(90))
    }

//	test "1.4 consulta remo competitivo" {
//		//remarEnCaminoRemeros deberia gastar 510 calorias al practicarse por 5 minutos
//		//remarEnCaminoRemeros deberia gastar 12750 calorias al practicarse por 90 minutos
//	}
    test "remar en el camino" {
        assert.equals(510, remarEnCaminoRemeros.caloriasGastadas(5))
        assert.equals(12750, remarEnCaminoRemeros.caloriasGastadas(90))
    }

//Punto 2: Personas
	//ATENCION: usar el metodo truncate(3) para truncar un numero a 3 decimales
	// Ej: 1.2345.truncate(3) -> devuelve 1.234 
	
    test '2.1.1 test sedentario running' {
		calamardo.realizar(correrEnLaPlaya )
        // hacer que calamardo practique correrEnLaPlaya
        assert.equals(59.948, calamardo.peso().truncate(3))
	// el peso de calamardo debería ser 59.948 (truncado a 3 decimales)
	} 
	
	test '2.1.2 test sedentario maraton' {
        calamardo.realizar(maratonBA )
//		// hacer que calamardo practique maratonBA
         assert.equals(59.871, calamardo.peso().truncate(3))
//		// el peso de calamardo debería ser 59.871 (truncado a 3 decimales)
	} 

    test '2.1.3 test sedentario remo' {
        calamardo.realizar(remarEnElDelta )
//		// hacer que calamardo practique remarEnElDelta
         assert.equals(59.925, calamardo.peso().truncate(3))
//		// el peso de calamardo debería ser 59.925 (truncado a 3 decimales)
	} 

    test '2.1.3 test sedentario remo competicion' {
        calamardo.realizar(remarEnCaminoRemeros )
//		// hacer que calamardo practique remarEnCaminoRemeros
         assert.equals(59.927, calamardo.peso().truncate(3))
//		// el peso de calamardo debería ser 59.927 (truncado a 3 decimales)
	} 
	
	test '2.1.5 test sedentario no puede practicar' {
        calamardo.peso(40)
//		// Hacer que el peso de calamardo sea 40
        assert.throwsException({calamardo.realizar(correrEnLaPlaya)})
//		// hacer que calamardo practique correrEnLaPlaya (NO SE PUEDE!)
        assert.equals(40, calamardo.peso())
//		// el peso de calamardo debería ser 40 
	} 
	
	test "2.2.1 test atleta running" {
//		// hacer que bob practique correrEnLaPlaya
        bob.realizar(correrEnLaPlaya)
//		// el peso de bob debería ser 39.725 (truncado a 3 decimales)
        assert.equals(39.725, bob.peso().truncate(3))
	 }

	test "2.2.2 test atleta maraton" {
        bob.realizar(maratonBA)
//		// hacer que bob practique maratonBA
        assert.equals(37.812, bob.peso().truncate(3))
//		// el peso de bob debería ser 37.812 (truncado a 3 decimales)
	 }

	test "2.2.3 test atleta remo" {
//		// hacer que bob practique remarEnElDelta( NO SE PUEDE!)
        assert.throwsException({bob.realizar(remarEnElDelta)})
//		// el peso de bob debería ser 40 
        assert.equals(40, bob.peso())
	}

	test "2.2.3 test atleta remo de competición" {
//		// hacer que bob practique remarEnCaminoRemeros
        bob.realizar(remarEnCaminoRemeros)
//		// el peso de bob debería ser 39.406
        assert.equals(39.406, bob.peso().truncate(3))
	}
	 
//punto 3: Consultas
	test "3.1 el mejor predio" {
                assert.that(true)
//		//El mejor predio del clubBarrial para bob debería ser recreo		
//		//El mejor predio del clubBarrial para calamardo debería ser recreo		
	}	
	
//	test "3.2 predios tranquis" {
//		//No debería haber predios tranquis en el clubBarrial para bob
//		//Los predios tranquis del clubBarrial para calamardo solo incluyen a recreo  
//	}
	
//	test "3.3 rutinas más exigentes" {
//		//Las rutinas más exigentes del clubBarrial para bob son maratonBA y remarEnCaminoRemeros
//		//Las rutinas más exigentes del clubBarrial para calamardo son maratonBA y remarEnElDelta
//	}
	
}
